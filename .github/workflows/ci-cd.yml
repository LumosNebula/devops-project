name: ci-cd

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux, docker]
    env:
      IMAGE_REPO: 192.168.86.75:80/library/myapp
    steps:
      # 1. Checkout 代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 Python 虚拟环境
      - name: setup-python-venv
        run: |
          python3 -m venv venv
          . venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f apps/myapp/requirements.txt ]; then
            pip install -r apps/myapp/requirements.txt
          fi

      # 3. 单元测试
      - name: run-unit-tests
        run: |
          . venv/bin/activate
          python -m unittest discover || true

      # 4. Docker 登录 Harbor
      - name: docker-login-harbor
        env:
          HARBOR_USER: ${{ secrets.HARBOR_USER }}
          HARBOR_PASS: ${{ secrets.HARBOR_PASS }}
        run: |
          if [ -z "$HARBOR_USER" ] || [ -z "$HARBOR_PASS" ]; then
            echo "HARBOR_USER or HARBOR_PASS not set; aborting docker login"
            exit 1
          fi
          printf '%s' "$HARBOR_PASS" | docker login 192.168.86.75:80 -u "$HARBOR_USER" --password-stdin

      # 5. 构建并推送 Docker 镜像
      - name: build-and-push-image
        id: build-image
        run: |
          set -e
          IMAGE_TAG=$(git rev-parse --short=12 HEAD)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          docker build -t ${IMAGE_REPO}:${IMAGE_TAG} -f apps/myapp/Dockerfile apps/myapp
          docker push ${IMAGE_REPO}:${IMAGE_TAG}

      # 6. 更新 Helm values 并 push 到 GitHub
      - name: update-helm-values-and-push
        env:
          CI_GIT_TOKEN: ${{ secrets.CI_GIT_TOKEN }}
          REPO: ${{ github.repository }}
          IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
        run: |
          if [ -z "$CI_GIT_TOKEN" ]; then
            echo "CI_GIT_TOKEN not set; skipping Helm values update"
            exit 0
          fi
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${CI_GIT_TOKEN}@github.com/${REPO}
          git fetch origin
          git checkout -B main
          sed -i "s|tag: .*|tag: ${IMAGE_TAG}|" charts/myapp/values.yaml
          git add charts/myapp/values.yaml
          git commit -m "ci: update image tag to ${IMAGE_TAG}" || echo "no changes to commit"
          git push origin main

      # 7. Argo CD 同步
      - name: trigger-argocd-sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          if [ -z "$ARGOCD_SERVER" ] || [ -z "$ARGOCD_TOKEN" ]; then
            echo "ARGOCD_SERVER or ARGOCD_TOKEN not set; skipping ArgoCD sync"
            exit 0
          fi
          APP_NAME="myapp"
          curl -k -X POST -H "Authorization: Bearer ${ARGOCD_TOKEN}" \
            "${ARGOCD_SERVER}/api/v1/applications/${APP_NAME}/sync" || true

      # 8. 应用 manifests
      - name: apply-manifests-via-kubeconfig
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG }}
        run: |
          if [ -z "$KUBECONFIG_B64" ]; then
            echo "KUBECONFIG not provided; skipping kubectl apply"
            exit 0
          fi
          echo "${KUBECONFIG_B64}" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl get nodes -o wide
          kubectl apply -f manifests/ || true

      # 9. 输出最终状态
      - name: final-status
        run: |
          echo "Image pushed: ${IMAGE_REPO}:${{ steps.build-image.outputs.IMAGE_TAG }}"
          kubectl --kubeconfig=/var/jenkins_home/.kube/config get pods -l app=myapp -n default -o wide || true
          sed -n '1,160p' charts/myapp/values.yaml || true
